File: src\copyFiles.ts
Content:
import * as vscode from 'vscode';
import * as fs from 'fs';
import * as path from 'path';
import { generateCopyList } from './generateCopyList';

export const copyFiles = async () => {
    const workspaceFolders = vscode.workspace.workspaceFolders;
    if (!workspaceFolders) {
        vscode.window.showErrorMessage('No workspace is open');
        return;
    }

    const rootPath = workspaceFolders[0].uri.fsPath;
    const copyListPath = path.join(rootPath, 'copylist.txt');
    const copiedFilesPath = path.join(rootPath, 'copiedfiles.json');

    if (!fs.existsSync(copyListPath)) {
        generateCopyList();
    }

    const copyList = fs.readFileSync(copyListPath, 'utf-8').split('\n').filter(Boolean);
    let copiedContent: any[] = [];

    const readDirectory = (dirPath: string) => {
        const files = fs.readdirSync(dirPath);
        for (const file of files) {
            const filePath = path.join(dirPath, file);
            if (filePath === copiedFilesPath) {
                continue;  // Skip the copiedfiles.json file
            }
            if (fs.lstatSync(filePath).isDirectory()) {
                readDirectory(filePath);
            } else {
                const fileContent = fs.readFileSync(filePath, 'utf-8');
                const relativePath = path.relative(rootPath, filePath);
                copiedContent.push({filePath: relativePath, content: fileContent});
            }
        }
    };

    for (const item of copyList) {
        const itemPath = path.join(rootPath, item);
        if (itemPath === copiedFilesPath) {
            continue;  // Skip the copiedfiles.json file
        }
        if (fs.existsSync(itemPath)) {
            if (fs.lstatSync(itemPath).isDirectory()) {
                readDirectory(itemPath);
            } else {
                const fileContent = fs.readFileSync(itemPath, 'utf-8');
                const relativePath = path.relative(rootPath, itemPath);
                copiedContent.push({filePath: relativePath, content: fileContent});
            }
        }
    }

    fs.writeFileSync(copiedFilesPath, JSON.stringify(copiedContent, null, 2));

    vscode.window.showInformationMessage('Files copied to copiedfiles.json');
};


File: src\extension.ts
Content:
import * as vscode from 'vscode';
import { readDirectory } from './readDirectory';
import { generateCopyList } from './generateCopyList';
import { restoreFiles } from './restoreFiles';
import { copyFiles } from './copyFiles';

export function activate(context: vscode.ExtensionContext) {
    let disposable = vscode.commands.registerCommand('copyfilesandcode.copyFiles', copyFiles);

    let generateDisposable = vscode.commands.registerCommand('copyfilesandcode.generateCopyList', generateCopyList);

    let restoreDisposable = vscode.commands.registerCommand('copyfilesandcode.restoreFiles', restoreFiles);

    context.subscriptions.push(disposable, generateDisposable, restoreDisposable);
}


File: src\generateCopyList.ts
Content:
import * as vscode from 'vscode';
import * as fs from 'fs';
import * as path from 'path';

export const generateCopyList = () => {
    const workspaceFolders = vscode.workspace.workspaceFolders;
    if (!workspaceFolders) {
        vscode.window.showErrorMessage('No workspace is open');
        return;
    }

    const rootPath = workspaceFolders[0].uri.fsPath;
    const copyListPath = path.join(rootPath, 'copylist.txt');
    const copiedFilesPath = path.join(rootPath, 'copiedfiles.txt');

    if (fs.existsSync(copyListPath) && fs.readFileSync(copyListPath, 'utf-8').trim() !== '') {
        const copyList = fs.readFileSync(copyListPath, 'utf-8').split('\n').filter(Boolean);
        let newCopyList = '';

        for (const item of copyList) {
            const itemPath = path.join(rootPath, item);
            if (fs.existsSync(itemPath) && fs.lstatSync(itemPath).isDirectory()) {
                fs.readdirSync(itemPath).forEach(file => {
                    const filePath = path.join(item, file);
                    newCopyList += filePath + '\n';
                });
            } else {
                newCopyList += item + '\n';
            }
        }

        fs.writeFileSync(copyListPath, newCopyList);
    } else {
        let copyList = '';

        fs.readdirSync(rootPath).forEach(file => {
            const filePath = path.join(rootPath, file);
            if (filePath !== copyListPath && filePath !== copiedFilesPath) {  // Exclude the copylist.txt and copiedfiles.txt files
                copyList += file + '\n';
            }
        });

        fs.writeFileSync(copyListPath, copyList);
    }

    vscode.window.showInformationMessage('copylist.txt generated');
};


File: src\readDirectory.ts
Content:
import * as fs from 'fs';
import * as path from 'path';
import { promisify } from 'util';

const readdirAsync = promisify(fs.readdir);
const readFileAsync = promisify(fs.readFile);

export const readDirectory = async (
    dirPath: string,
    rootPath: string,
    visitedDirs: Set<string>,
    processFile: (relativePath: string, fileContent: string) => void
) => {
    if (visitedDirs.has(dirPath)) {
        return;
    }
    visitedDirs.add(dirPath);

    try {
        const files = await readdirAsync(dirPath);
        for (const file of files) {
            const filePath = path.join(dirPath, file);
            const stat = await fs.promises.lstat(filePath);

            // Handle symbolic links
            if (stat.isSymbolicLink()) {
                continue;
            }

            if (stat.isDirectory()) {
                await readDirectory(filePath, rootPath, visitedDirs, processFile);
            } else {
                const fileContent = await readFileAsync(filePath, 'utf-8');
                const relativePath = path.relative(rootPath, filePath);
                processFile(relativePath, fileContent);
            }
        }
    } catch (error) {
        console.error(error);
    }
};


File: src\restoreFiles.ts
Content:
import * as vscode from 'vscode';
import * as fs from 'fs';
import * as path from 'path';

export const restoreFiles = () => {
    const workspaceFolders = vscode.workspace.workspaceFolders;
    if (!workspaceFolders) {
        vscode.window.showErrorMessage('No workspace is open');
        return;
    }

    const rootPath = workspaceFolders[0].uri.fsPath;
    const copiedFilesPath = path.join(rootPath, 'copiedfiles.json');

    if (!fs.existsSync(copiedFilesPath)) {
        vscode.window.showErrorMessage('No copied files to restore');
        return;
    }

    const copiedFiles = JSON.parse(fs.readFileSync(copiedFilesPath, 'utf-8'));

    for (const copiedFile of copiedFiles) {
        const filePath = path.join(rootPath, copiedFile.filePath);
        const fileContent = copiedFile.content;

        // Check if the path is a directory
        if (fs.existsSync(filePath) && fs.lstatSync(filePath).isDirectory()) {
            continue;  // Skip directories
        }

        fs.writeFileSync(filePath, fileContent);
    }

    vscode.window.showInformationMessage('Files restored from copiedfiles.json');
};


File: package.json
Content:
{
  "name": "copyfilesandcode",
  "displayName": "copyfilesandcode",
  "description": "",
  "version": "0.0.1",
  "engines": {
    "vscode": "^1.80.0"
  },
  "categories": [
    "Other"
  ],
  "activationEvents": [
    "onCommand:copyfilesandcode.copyFiles",
    "onCommand:copyfilesandcode.generateCopyList",
    "onCommand:copyfilesandcode.restoreFiles"
  ],
  "main": "./out/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "copyfilesandcode.copyFiles",
        "title": "Copy Files & Code"
      },
      {
        "command": "copyfilesandcode.generateCopyList",
        "title": "Generate Copy List"
      },
      {
        "command": "copyfilesandcode.restoreFiles",
        "title": "Restore Files"
      }
    ],
    "menus": {
      "explorer/context": [
        {
          "command": "copyfilesandcode.copyFiles",
          "group": "navigation"
        },
        {
          "command": "copyfilesandcode.generateCopyList",
          "group": "navigation"
        },
        {
          "command": "copyfilesandcode.restoreFiles",
          "group": "navigation"
        }
      ]
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run compile && npm run lint",
    "lint": "eslint src --ext ts",
    "test": "node ./out/test/runTest.js"
  },
  "devDependencies": {
    "@types/glob": "^8.1.0",
    "@types/mocha": "^10.0.1",
    "@types/node": "20.2.5",
    "@types/vscode": "^1.80.0",
    "@typescript-eslint/eslint-plugin": "^5.59.8",
    "@typescript-eslint/parser": "^5.59.8",
    "@vscode/test-electron": "^2.3.2",
    "eslint": "^8.41.0",
    "glob": "^8.1.0",
    "mocha": "^10.2.0",
    "typescript": "^5.1.3"
  }
}


