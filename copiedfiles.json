[
  {
    "filePath": "package.json",
    "content": "{\r\n  \"name\": \"copy-files-and-code\",\r\n  \"displayName\": \"Copy Files and Code\",\r\n  \"description\": \"VS Code extension to copy files and code\",\r\n  \"version\": \"1.0.0\",\r\n  \"engines\": {\r\n      \"vscode\": \"^1.46.0\"\r\n  },\r\n  \"categories\": [\r\n      \"Other\"\r\n  ],\r\n  \"activationEvents\": [\r\n      \"onCommand:copyfilesandcode.copyFiles\",\r\n      \"onCommand:copyfilesandcode.generateCopyList\",\r\n      \"onCommand:copyfilesandcode.restoreFiles\",\r\n      \"onCommand:copyfilesandcode.openWebview\"\r\n  ],\r\n  \"main\": \"./out/extension.js\",\r\n  \"contributes\": {\r\n      \"commands\": [\r\n          {\r\n              \"command\": \"copyfilesandcode.copyFiles\",\r\n              \"title\": \"Copy Files & Code\"\r\n          },\r\n          {\r\n              \"command\": \"copyfilesandcode.generateCopyList\",\r\n              \"title\": \"Generate Copy List\"\r\n          },\r\n          {\r\n              \"command\": \"copyfilesandcode.restoreFiles\",\r\n              \"title\": \"Restore Files\"\r\n          },\r\n          {\r\n              \"command\": \"copyfilesandcode.openWebview\",\r\n              \"title\": \"Open Webview\"\r\n          }\r\n      ]\r\n  },\r\n  \"scripts\": {\r\n      \"vscode:prepublish\": \"npm run compile\",\r\n      \"compile\": \"tsc -p ./\",\r\n      \"watch\": \"tsc -watch -p ./\",\r\n      \"postinstall\": \"node ./node_modules/vscode/bin/install\",\r\n      \"test\": \"node ./out/test/runTest.js\"\r\n  },\r\n  \"devDependencies\": {\r\n      \"@types/node\": \"^14.14.41\",\r\n      \"@types/vscode\": \"^1.56.0\",\r\n      \"typescript\": \"^4.3.2\",\r\n      \"vscode-test\": \"^1.5.2\"\r\n  }\r\n}\r\n"
  },
  {
    "filePath": "src\\copyFiles.ts",
    "content": "import * as vscode from 'vscode';\r\nimport * as fs from 'fs';\r\nimport * as path from 'path';\r\nimport { generateCopyList } from './generateCopyList';\r\n\r\nexport const copyFiles = async () => {\r\n    const workspaceFolders = vscode.workspace.workspaceFolders;\r\n    if (!workspaceFolders) {\r\n        vscode.window.showErrorMessage('No workspace is open');\r\n        return;\r\n    }\r\n\r\n    const rootPath = workspaceFolders[0].uri.fsPath;\r\n    const copyListPath = path.join(rootPath, 'copylist.txt');\r\n    const copiedFilesPath = path.join(rootPath, 'copiedfiles.json');\r\n\r\n    if (!fs.existsSync(copyListPath)) {\r\n        generateCopyList();\r\n    }\r\n\r\n    const copyList = fs.readFileSync(copyListPath, 'utf-8').split('\\n').filter(Boolean);\r\n    let copiedContent: any[] = [];\r\n\r\n    const readDirectory = (dirPath: string) => {\r\n        const files = fs.readdirSync(dirPath);\r\n        for (const file of files) {\r\n            const filePath = path.join(dirPath, file);\r\n            if (filePath === copiedFilesPath) {\r\n                continue;  // Skip the copiedfiles.json file\r\n            }\r\n            if (fs.lstatSync(filePath).isDirectory()) {\r\n                readDirectory(filePath);\r\n            } else {\r\n                const fileContent = fs.readFileSync(filePath, 'utf-8');\r\n                const relativePath = path.relative(rootPath, filePath);\r\n                copiedContent.push({filePath: relativePath, content: fileContent});\r\n            }\r\n        }\r\n    };\r\n\r\n    for (const item of copyList) {\r\n        const itemPath = path.join(rootPath, item);\r\n        if (itemPath === copiedFilesPath) {\r\n            continue;  // Skip the copiedfiles.json file\r\n        }\r\n        if (fs.existsSync(itemPath)) {\r\n            if (fs.lstatSync(itemPath).isDirectory()) {\r\n                readDirectory(itemPath);\r\n            } else {\r\n                const fileContent = fs.readFileSync(itemPath, 'utf-8');\r\n                const relativePath = path.relative(rootPath, itemPath);\r\n                copiedContent.push({filePath: relativePath, content: fileContent});\r\n            }\r\n        }\r\n    }\r\n\r\n    fs.writeFileSync(copiedFilesPath, JSON.stringify(copiedContent, null, 2));\r\n\r\n    vscode.window.showInformationMessage('Files copied to copiedfiles.json');\r\n};\r\n"
  },
  {
    "filePath": "src\\extension.ts",
    "content": "import * as vscode from 'vscode';\r\nimport { readDirectory } from './readDirectory';\r\nimport { generateCopyList } from './generateCopyList';\r\nimport { restoreFiles } from './restoreFiles';\r\nimport { copyFiles } from './copyFiles';\r\n\r\nexport function activate(context: vscode.ExtensionContext) {\r\n    let disposable = vscode.commands.registerCommand('copyfilesandcode.copyFiles', copyFiles);\r\n    let generateDisposable = vscode.commands.registerCommand('copyfilesandcode.generateCopyList', generateCopyList);\r\n    let restoreDisposable = vscode.commands.registerCommand('copyfilesandcode.restoreFiles', restoreFiles);\r\n    context.subscriptions.push(disposable, generateDisposable, restoreDisposable);\r\n\r\n    let openWebView = vscode.commands.registerCommand('copyfilesandcode.openWebview', function () {\r\n        const panel = vscode.window.createWebviewPanel(\r\n            'copyFilesAndCodeCommands',\r\n            'Copy Files And Code Commands',\r\n            vscode.ViewColumn.One,\r\n            {enableScripts: true} // Enable JavaScript in the webview\r\n        );\r\n\r\n        panel.webview.html = getWebviewContent(context);\r\n\r\n        // Listen to the webview's messages\r\n        panel.webview.onDidReceiveMessage(\r\n            message => {\r\n                switch (message.command) {\r\n                    case 'copyfilesandcode.copyFiles':\r\n                        vscode.commands.executeCommand('copyfilesandcode.copyFiles');\r\n                        return;\r\n                    case 'copyfilesandcode.generateCopyList':\r\n                        vscode.commands.executeCommand('copyfilesandcode.generateCopyList');\r\n                        return;\r\n                    case 'copyfilesandcode.restoreFiles':\r\n                        vscode.commands.executeCommand('copyfilesandcode.restoreFiles');\r\n                        return;\r\n                }\r\n            },\r\n            undefined,\r\n            context.subscriptions\r\n        );\r\n    });\r\n    context.subscriptions.push(openWebView);\r\n}\r\n\r\nfunction getWebviewContent(context: vscode.ExtensionContext) {\r\n    return `\r\n        <html>\r\n        <body>\r\n            <h1>Commands</h1>\r\n            <button onclick=\"copyFiles()\">Copy Files & Code</button>\r\n            <button onclick=\"generateCopyList()\">Generate Copy List</button>\r\n            <button onclick=\"restoreFiles()\">Restore Files</button>\r\n\r\n            <script>\r\n                const vscode = acquireVsCodeApi();\r\n\r\n                function copyFiles() {\r\n                    vscode.postMessage({\r\n                        command: 'copyfilesandcode.copyFiles'\r\n                    });\r\n                }\r\n\r\n                function generateCopyList() {\r\n                    vscode.postMessage({\r\n                        command: 'copyfilesandcode.generateCopyList'\r\n                    });\r\n                }\r\n\r\n                function restoreFiles() {\r\n                    vscode.postMessage({\r\n                        command: 'copyfilesandcode.restoreFiles'\r\n                    });\r\n                }\r\n            </script>\r\n        </body>\r\n        </html>`;\r\n}\r\n"
  },
  {
    "filePath": "src\\generateCopyList.ts",
    "content": "import * as vscode from 'vscode';\r\nimport * as fs from 'fs';\r\nimport * as path from 'path';\r\n\r\nexport const generateCopyList = () => {\r\n    const workspaceFolders = vscode.workspace.workspaceFolders;\r\n    if (!workspaceFolders) {\r\n        vscode.window.showErrorMessage('No workspace is open');\r\n        return;\r\n    }\r\n\r\n    const rootPath = workspaceFolders[0].uri.fsPath;\r\n    const copyListPath = path.join(rootPath, 'copylist.txt');\r\n    const copiedFilesPath = path.join(rootPath, 'copiedfiles.txt');\r\n\r\n    if (fs.existsSync(copyListPath) && fs.readFileSync(copyListPath, 'utf-8').trim() !== '') {\r\n        const copyList = fs.readFileSync(copyListPath, 'utf-8').split('\\n').filter(Boolean);\r\n        let newCopyList = '';\r\n\r\n        for (const item of copyList) {\r\n            const itemPath = path.join(rootPath, item);\r\n            if (fs.existsSync(itemPath) && fs.lstatSync(itemPath).isDirectory()) {\r\n                fs.readdirSync(itemPath).forEach(file => {\r\n                    const filePath = path.join(item, file);\r\n                    newCopyList += filePath + '\\n';\r\n                });\r\n            } else {\r\n                newCopyList += item + '\\n';\r\n            }\r\n        }\r\n\r\n        fs.writeFileSync(copyListPath, newCopyList);\r\n    } else {\r\n        let copyList = '';\r\n\r\n        fs.readdirSync(rootPath).forEach(file => {\r\n            const filePath = path.join(rootPath, file);\r\n            if (filePath !== copyListPath && filePath !== copiedFilesPath) {  // Exclude the copylist.txt and copiedfiles.txt files\r\n                copyList += file + '\\n';\r\n            }\r\n        });\r\n\r\n        fs.writeFileSync(copyListPath, copyList);\r\n    }\r\n\r\n    vscode.window.showInformationMessage('copylist.txt generated');\r\n};\r\n"
  },
  {
    "filePath": "src\\readDirectory.ts",
    "content": "import * as fs from 'fs';\r\nimport * as path from 'path';\r\nimport { promisify } from 'util';\r\n\r\nconst readdirAsync = promisify(fs.readdir);\r\nconst readFileAsync = promisify(fs.readFile);\r\n\r\nexport const readDirectory = async (\r\n    dirPath: string,\r\n    rootPath: string,\r\n    visitedDirs: Set<string>,\r\n    processFile: (relativePath: string, fileContent: string) => void\r\n) => {\r\n    if (visitedDirs.has(dirPath)) {\r\n        return;\r\n    }\r\n    visitedDirs.add(dirPath);\r\n\r\n    try {\r\n        const files = await readdirAsync(dirPath);\r\n        for (const file of files) {\r\n            const filePath = path.join(dirPath, file);\r\n            const stat = await fs.promises.lstat(filePath);\r\n\r\n            // Handle symbolic links\r\n            if (stat.isSymbolicLink()) {\r\n                continue;\r\n            }\r\n\r\n            if (stat.isDirectory()) {\r\n                await readDirectory(filePath, rootPath, visitedDirs, processFile);\r\n            } else {\r\n                const fileContent = await readFileAsync(filePath, 'utf-8');\r\n                const relativePath = path.relative(rootPath, filePath);\r\n                processFile(relativePath, fileContent);\r\n            }\r\n        }\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n};\r\n"
  },
  {
    "filePath": "src\\restoreFiles.ts",
    "content": "import * as vscode from 'vscode';\r\nimport * as fs from 'fs';\r\nimport * as path from 'path';\r\n\r\nexport const restoreFiles = () => {\r\n    const workspaceFolders = vscode.workspace.workspaceFolders;\r\n    if (!workspaceFolders) {\r\n        vscode.window.showErrorMessage('No workspace is open');\r\n        return;\r\n    }\r\n\r\n    const rootPath = workspaceFolders[0].uri.fsPath;\r\n    const copiedFilesPath = path.join(rootPath, 'copiedfiles.json');\r\n\r\n    if (!fs.existsSync(copiedFilesPath)) {\r\n        vscode.window.showErrorMessage('No copied files to restore');\r\n        return;\r\n    }\r\n\r\n    const copiedFiles = JSON.parse(fs.readFileSync(copiedFilesPath, 'utf-8'));\r\n\r\n    for (const copiedFile of copiedFiles) {\r\n        const filePath = path.join(rootPath, copiedFile.filePath);\r\n        const fileContent = copiedFile.content;\r\n\r\n        // Check if the path is a directory\r\n        if (fs.existsSync(filePath) && fs.lstatSync(filePath).isDirectory()) {\r\n            continue;  // Skip directories\r\n        }\r\n\r\n        fs.writeFileSync(filePath, fileContent);\r\n    }\r\n\r\n    vscode.window.showInformationMessage('Files restored from copiedfiles.json');\r\n};\r\n"
  }
]